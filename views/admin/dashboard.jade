doctype html
html
  head
    title Admin Dashboard
    meta(name="csrf-token" content=csrfToken)
    style.
      body { margin: 0; display: flex; }
      .sidebar { width: 200px; padding: 20px; background: #f5f5f5; }
      .content { flex: 1; padding: 20px; }
      .menu-item { cursor: pointer; padding: 10px; }
      .menu-item:hover { background: #e0e0e0; }
      table { width: 100%; border-collapse: collapse; margin-top: 20px; }
      th, td { padding: 8px; border: 1px solid #ddd; }
      .modal { display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%;
        background: rgba(0,0,0,0.5); }
      .modal-content { background: white; padding: 20px; width: 500px; margin: 50px auto;
        border-radius: 4px; }
      .form-group { margin-bottom: 15px; }
      label { display: block; margin-bottom: 5px; }
      input { 
        width: calc(100% - 16px); 
        padding: 8px;
        margin-bottom: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
      }
      .btn-primary { 
        background: #4285f4; 
        color: white; 
        border: none; 
        padding: 8px 15px;
        cursor: pointer; 
        border-radius: 4px;
        margin-bottom: 20px;
      }
      .btn-primary:hover { background: #3367d6; }
      .modal-buttons {
        display: flex;
        gap: 15px;  /* Increased gap between buttons */
        justify-content: flex-end;
        margin-top: 20px;
      }
      .logout-btn {
        position: absolute;
        top: 20px;
        right: 20px;
        background: #f44336;
        color: white;
        border: none;
        padding: 8px 15px;
        border-radius: 4px;
        cursor: pointer;
      }
      .logout-btn:hover {
        background: #d32f2f;
      }

  body
    button.logout-btn(onclick="logout()") 退出登录
    .sidebar
      .menu-item(onclick="showVpnRoutes()") 线路列表
      .menu-item(onclick="showUsers()") 用户管理
      .menu-item(onclick="showSubscriptionPlans()") 内购套餐

    .content#content
    
    // Add Plan Modal
    #addPlanModal.modal
      .modal-content
        h2#planModalTitle 添加内购套餐
        form#addPlanForm
          .form-group
            label(for="planId") 套餐ID
            input(type="text", name="planId", required)
          .form-group
            label(for="applePlanId") 苹果套餐ID
            input(type="text", name="applePlanId", required)
          .form-group
            label(for="title") 标题
            input(type="text", name="title", required)
          .form-group
            label(for="description") 描述
            textarea(name="description", rows="3", style="width: 100%")
          .form-group
            label(for="price") 价格
            input(type="number", name="price", step="0.01", required)
          .form-group
            label(for="duration") 订阅周期(天)
            input(type="number", name="duration", required)
          .form-group
            label(for="autoRenew") 自动续费
            select(name="autoRenew")
              option(value="false") 否
              option(value="true") 是
          .form-group
            label(for="clientOS") 客户端OS
            select(name="clientOS")
              option(value="All") 全部
              option(value="iOS") iOS
              option(value="Android") Android
          .form-group
            label(for="isVisible") 是否显示
            select(name="isVisible")
              option(value="true") 是
              option(value="false") 否
              
          .modal-buttons
            button.btn-primary(type="submit") 保存
            button.btn-primary(type="button", onclick="closePlanModal()") 取消

    // Add Route Modal
    #addRouteModal.modal
      .modal-content
        h2 添加线路
        form#addRouteForm
          .form-group
            label(for="alias") 别名
            input(type="text", name="alias", required)
          .form-group
            label(for="ip") IP地址
            input(type="text", name="ip", required)
          .form-group
            label(for="port") 端口
            input(type="text", name="port", required)
          .form-group
            label(for="password") 密码
            input(type="text", name="password", required)
          .form-group
            label(for="encryptionMethod") 加密方式
            input(type="text", name="encryptionMethod", required)
          .form-group
            label(for="extraInfo") 额外信息
            textarea(name="extraInfo", rows="3", style="width: 100%")
          .modal-buttons
            button.btn-primary(type="submit") 保存
            button.btn-primary(type="button", onclick="closeModal()") 取消

    // Add User Modal
    #addUserModal.modal
      .modal-content
        h2 添加用户
        form#addUserForm
          .form-group
            label(for="username") 用户名
            input(type="text", name="username", required)
          .form-group
            label(for="email") 邮箱
            input(type="email", name="email", required)
          .form-group
            label(for="role") 角色
            select(name="role")
              option(value="user") 用户
              option(value="admin") 管理员
          .modal-buttons
            button.btn-primary(type="submit") 保存
            button.btn-primary(type="button", onclick="closeUserModal()") 取消

    script.
      // Move all async functions into DOMContentLoaded
      document.addEventListener('DOMContentLoaded', () => {
        // Initialize form handlers
        initFormHandlers();
        // Load initial content
        showVpnRoutes();
      });

      function initFormHandlers() {
        // Add form submit handlers here
        document.getElementById('addPlanForm').onsubmit = async (e) => {
          e.preventDefault();
          const formData = new FormData(e.target);
          const data = Object.fromEntries(formData.entries());
          const planId = e.target.dataset.planId;
          
          try {
            const res = await fetch(`/admin/subscription-plans${planId ? '/' + planId : ''}`, {
              method: planId ? 'PUT' : 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(data)
            });
            
            const result = await res.json();
            if (result.success) {
              closePlanModal();
              showSubscriptionPlans();
              e.target.dataset.planId = '';
            } else {
              alert(result.message || '操作失败');
            }
          } catch (err) {
            console.error('Failed to save plan:', err);
            alert('操作失败，请重试');
          }
        };

        document.getElementById('addRouteForm').onsubmit = async (e) => {
          e.preventDefault();
          const formData = new FormData(e.target);
          const data = Object.fromEntries(formData.entries());
          const routeId = e.target.dataset.routeId;
          
          try {
            const res = await fetch(`/admin/vpn-routes${routeId ? '/' + routeId : ''}`, {
              method: routeId ? 'PUT' : 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(data)
            });
            
            const result = await res.json();
            if (result.success) {
              closeModal();
              showVpnRoutes(); // Refresh the list
              // Clear route ID from form
              e.target.dataset.routeId = '';
            } else {
              alert(result.message || '操作失败');
            }
          } catch (err) {
            console.error('Failed to save route:', err);
            alert('操作失败，请重试');
          }
        };

        document.getElementById('addUserForm').onsubmit = async (e) => {
          e.preventDefault();
          const formData = new FormData(e.target);
          const data = Object.fromEntries(formData.entries());
          const userId = e.target.dataset.userId;
          
          try {
            const res = await fetch(`/admin/users${userId ? '/' + userId : ''}`, {
              method: userId ? 'PUT' : 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(data)
            });
            
            const result = await res.json();
            if (result.success) {
              closeUserModal();
              showUsers(); // Refresh the list
              // Clear user ID from form
              e.target.dataset.userId = '';
            } else {
              alert(result.message || '操作失败');
            }
          } catch (err) {
            console.error('Failed to save user:', err);
            alert('操作失败，请重试');
          }
        };
      }

      async function showVpnRoutes() {
        try {
          const res = await fetch('/admin/vpn-routes');
          const data = await res.json();
          if (data.success) {
            const html = `
              <h2>线路列表</h2>
              <div style="margin-bottom: 20px;">
                <button class="btn-primary" onclick="decryptRoutes()">解密显示</button>
                <button class="btn-primary" onclick="showAddRouteModal()">添加线路</button>
              </div>
              <table>
                <tr>
                  <th>别名</th>
                  <th>IP</th>
                  <th>端口</th>
                  <th>加密方式</th>
                  <th>操作</th>
                </tr>
                <tbody id="routesList">
                  ${data.data.map(route => `
                    <tr data-route='${JSON.stringify(route)}'>
                      <td>${route.alias}</td>
                      <td>${route.ip}</td>
                      <td>${route.port}</td>
                      <td>${route.encryptionMethod}</td>
                      <td>
                        <button onclick="editRoute('${route._id}')">编辑</button>
                        <button onclick="deleteRoute('${route._id}')">删除</button>
                      </td>
                    </tr>
                  `).join('')}
                </tbody>
              </table>
            `;
            const contentEl = document.getElementById('content');
            if (contentEl) {
              contentEl.innerHTML = html;
            }
          }
        } catch (err) {
          console.error('Failed to load routes:', err);
          alert('加载线路列表失败，请重试');
        }
      }

      async function decryptRoutes() {
        try {
          const rows = document.querySelectorAll('#routesList tr');
          
          for (const row of rows) {
            const route = JSON.parse(row.dataset.route);
            const cells = row.querySelectorAll('td');
            
            const decryptedData = await fetch('/admin/decrypt', 
              addCSRFToken({
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  data: {
                    alias: route.alias,
                    ip: route.ip,
                    port: route.port,
                    encryptionMethod: route.encryptionMethod
                  }
                })
              })
            ).then(res => res.json());

            if (decryptedData.success) {
              cells[0].textContent = decryptedData.data.alias;
              cells[1].textContent = decryptedData.data.ip;
              cells[2].textContent = decryptedData.data.port;
              cells[3].textContent = decryptedData.data.encryptionMethod;
            } else {
              throw new Error(decryptedData.message || '解密失败');
            }
          }
        } catch (err) {
          console.error('解密失败:', err);
          alert('解密失败，请重试');
        }
      }

      function showAddRouteModal() {
        document.getElementById('addRouteModal').style.display = 'block';
      }

      async function deleteRoute(id) {
        if (!confirm('确定要删除该线路吗？')) {
          return;
        }

        try {
          const res = await fetch(`/admin/vpn-routes/${id}`, {
            method: 'DELETE'
          });
          
          const result = await res.json();
          if (result.success) {
            showVpnRoutes(); // Refresh the list
          } else {
            alert(result.message || '删除失败');
          }
        } catch (err) {
          console.error('Failed to delete route:', err);
          alert('删除失败，请重试');
        }
      }

      async function editRoute(id) {
        try {
          // First get the route data
          const res = await fetch(`/admin/vpn-routes/${id}`);
          const result = await res.json();
          
          if (result.success) {
            const route = result.data;
            // Fill the form with route data
            const form = document.getElementById('addRouteForm');
            form.alias.value = route.alias;
            form.ip.value = route.ip;
            form.port.value = route.port;
            form.password.value = route.password;
            form.encryptionMethod.value = route.encryptionMethod;
            form.extraInfo.value = route.extraInfo;
            
            // Add route ID to form for update
            form.dataset.routeId = id;
            
            // Show modal
            showAddRouteModal();
          }
        } catch (err) {
          console.error('Failed to get route:', err);
          alert('获取线路信息失败，请重试');
        }
      }

      function closeModal() {
        const form = document.getElementById('addRouteForm');
        form.reset();
        form.dataset.routeId = '';
        document.getElementById('addRouteModal').style.display = 'none';
      }

      async function showUsers() {
        console.log('Loading users...');
        const res = await fetch('/admin/users');
        const data = await res.json();
        if (data.success) {
          const html = `
            <h2>用户管理</h2>
            <table>
              <tr>
                <th>用户名</th>
                <th>邮箱</th>
                <th>角色</th>
                <th>操作</th>
              </tr>
              <tbody id="usersList">
                ${data.data.map(user => `
                  <tr data-user='${JSON.stringify(user)}'>
                    <td>${user.username}</td>
                    <td>${user.email}</td>
                    <td>${user.role}</td>
                    <td>
                      <button onclick="editUser('${user._id}')">编辑</button>
                      <button onclick="deleteUser('${user._id}')">删除</button>
                    </td>
                  </tr>
                `).join('')}
              </tbody>
            </table>
          `;
          document.getElementById('content').innerHTML = html;
        }
      }

      async function deleteUser(id) {
        if (!confirm('确定要删除该用户吗？')) {
          return;
        }

        try {
          const res = await fetch(`/admin/users/${id}`, {
            method: 'DELETE'
          });
          
          const result = await res.json();
          if (result.success) {
            showUsers(); // Refresh the list
          } else {
            alert(result.message || '删除失败');
          }
        } catch (err) {
          console.error('Failed to delete user:', err);
          alert('删除失败，请重试');
        }
      }

      async function editUser(id) {
        try {
          // First get the user data
          const res = await fetch(`/admin/users/${id}`);
          const result = await res.json();
          
          if (result.success) {
            const user = result.data;
            // Fill the form with user data
            const form = document.getElementById('addUserForm');
            form.username.value = user.username;
            form.email.value = user.email;
            form.role.value = user.role;
            
            // Add user ID to form for update
            form.dataset.userId = id;
            
            // Show modal
            showAddUserModal();
          }
        } catch (err) {
          console.error('Failed to get user:', err);
          alert('获取用户信息失败，请重试');
        }
      }

      function closeUserModal() {
        const form = document.getElementById('addUserForm');
        form.reset();
        form.dataset.userId = '';
        document.getElementById('addUserModal').style.display = 'none';
      }

      async function logout() {
        try {
          const res = await fetch('/admin/logout', {
            method: 'POST'
          });
          const data = await res.json();
          
          if (data.success) {
            window.location.href = '/admin/login';
          } else {
            alert(data.message || '退出失败');
          }
        } catch (err) {
          console.error('Logout failed:', err);
          alert('退出失败，请重试');
        }
      }

      async function showSubscriptionPlans() {
        const res = await fetch('/admin/subscription-plans');
        const data = await res.json();
        if (data.success) {
          const html = `
            <h2>内购套餐列表</h2>
            <div style="margin-bottom: 20px;">
              <button class="btn-primary" onclick="showAddPlanModal()">添加套餐</button>
            </div>
            <table>
              <tr>
                <th>套餐ID</th>
                <th>苹果套餐ID</th>
                <th>标题</th>
                <th>价格</th>
                <th>订阅周期(天)</th>
                <th>自动续费</th>
                <th>客户端OS</th>
                <th>是否显示</th>
                <th>操作</th>
              </tr>
              <tbody id="plansList">
                ${data.data.map(plan => `
                  <tr>
                    <td>${plan.planId}</td>
                    <td>${plan.applePlanId}</td>
                    <td>${plan.title}</td>
                    <td>${plan.price}</td>
                    <td>${plan.duration}</td>
                    <td>${plan.autoRenew ? '是' : '否'}</td>
                    <td>${plan.clientOS}</td>
                    <td>${plan.isVisible ? '是' : '否'}</td>
                    <td>
                      <button onclick="editPlan('${plan._id}')">编辑</button>
                      <button onclick="deletePlan('${plan._id}')">删除</button>
                    </td>
                  </tr>
                `).join('')}
              </tbody>
            </table>
          `;
          document.getElementById('content').innerHTML = html;
        }
      }

      function showAddPlanModal() {
        document.getElementById('planModalTitle').textContent = '添加内购套餐';
        document.getElementById('addPlanForm').reset();
        document.getElementById('addPlanModal').style.display = 'block';
      }

      function closePlanModal() {
        document.getElementById('addPlanForm').reset();
        document.getElementById('addPlanModal').style.display = 'none';
      }

      async function editPlan(id) {
        try {
          const res = await fetch(`/admin/subscription-plans/${id}`);
          const result = await res.json();
          
          if (result.success) {
            const plan = result.data;
            const form = document.getElementById('addPlanForm');
            
            form.planId.value = plan.planId;
            form.applePlanId.value = plan.applePlanId;
            form.title.value = plan.title;
            form.description.value = plan.description || '';
            form.price.value = plan.price;
            form.duration.value = plan.duration;
            form.autoRenew.value = plan.autoRenew;
            form.clientOS.value = plan.clientOS;
            form.isVisible.value = plan.isVisible;
            
            form.dataset.planId = id;
            document.getElementById('planModalTitle').textContent = '编辑内购套餐';
            document.getElementById('addPlanModal').style.display = 'block';
          }
        } catch (err) {
          console.error('Failed to get plan:', err);
          alert('获取套餐信息失败，请重试');
        }
      }

      async function deletePlan(id) {
        if (!confirm('确定要删除该套餐吗？')) {
          return;
        }

        try {
          const res = await fetch(`/admin/subscription-plans/${id}`, {
            method: 'DELETE'
          });
          
          const result = await res.json();
          if (result.success) {
            showSubscriptionPlans();
          } else {
            alert(result.message || '删除失败');
          }
        } catch (err) {
          console.error('Failed to delete plan:', err);
          alert('删除失败，请重试');
        }
      }